return(paste("Supuesto de Homocedasticidad: ","<span style=\"color:green;\"> Sí cumple.</span>"))
}else{
return(paste("Supuesto de Homocedasticidad: ","<span style=\"color:red;\"> No cumple.</span>"))
}
})
#________________________________________________________________
output$independenciaDurbin <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
Aov <- aov(Dep2 ~ Ind2, data=dataBY)
DW <- durbinWatsonTest(Aov)
Tabla <- data.frame(Autocor=DW[1],
Dw=signif(as.numeric(DW[2]),4),
ValP=signif(as.numeric(DW[3]),4))
colnames(Tabla) <- c('Autocorrelación','D-W Statistic',
'p-value')
Tabla
})
output$independenciaConclu <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
Aov <- aov(Dep2 ~ Ind2, data=dataBY)
DW <- durbinWatsonTest(Aov)
if (DW[3] >= input$alpha){
response=paste0('Según el test de Durbin Watson, no existe presencia de autocorrelación en los residuos.')
} else {
response=paste0('Según el test de Durbin Watson, existe presencia de autocorrelación en los residuos.')
}
response
})
output$CumpleIndependencia <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
Aov <- aov(Dep2 ~ Ind2, data=dataBY)
DW <- durbinWatsonTest(Aov)
if (DW[3] >= input$alpha){
return(paste("Supuesto de Independencia: ","<span style=\"color:green;\"> Sí cumple.</span>"))
}else{
return(paste("Supuesto de Independencia: ","<span style=\"color:red;\"> No cumple.</span>"))
}
})
#_________________________________________________________
output$simetria <- renderHighchart({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
# Dep <- names(Data)[2]
#  Ind <- names(Data)[1]
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
skewness(SA$residuals)
histRes <- hist(SA$residuals, plot=FALSE)
hchart(histRes, name='', color='#84DED4')%>%
hc_title(text='Histograma de los residuos')
})
output$simetriaCoef <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
Tabla <- data.frame(Estadístico=skewness(SA$residuals))
colnames(Tabla) <- c('Coeficiente de asimetría')
Tabla
})
output$simetriaConclu <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
if (skewness(SA$residuals) > 0){
response=paste0('Según el coeficiente de asimetría, la distribución de los residuos tiene una asimetría positiva (Sesgo a la derecha)')
} else if (skewness(SA$residuals) < 0){
response=paste0('Según el coeficiente de asimetría, la distribución de los residuos tiene una asimetría negativa (Sesgo a la izquierda)')
} else {
response=paste0('Según el coeficiente de asimetría, la distribución de los residuos es simétrica ')
}
response
})
output$CumpleSimet <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
if(skewness(SA$residuals) ==  0 ){
return(paste("Supuesto de Simetría: ","<span style=\"color:green;\"> Sí cumple.</span>"))
}else{
return(paste("Supuesto de Simetría: ","<span style=\"color:red;\"> No cumple.</span>"))
}
})
#__________________________________________________
output$Box <- renderHighchart({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Means <- aggregate(as.matrix(Data[,Dep]) ~ as.factor(as.matrix(Data[,Ind])), data = Data, mean)
colnames(Means) <- c('Nombres', 'Media')
hcboxplot(x=as.numeric(as.matrix(Data[,Dep])), var=as.factor(as.matrix(Data[,Ind])), name = "Diagrama de cajas", color = "#0E1142", outliers = FALSE,
showInLegend=TRUE)%>%
hc_yAxis(title = list(text = Dep))%>%
hc_xAxis(title = list(text = "Niveles"))%>%
hc_chart(type = "column")%>%
hc_plotOptions(showInLegend=TRUE,dataLabels=TRUE)%>%
hc_add_series(Means, type='bubble', hcaes(x =Nombres,y=Media),maxSize = "7%",
tooltip=list(pointFormat='<br> {point.y} ',headerFormat='<b> Media'), name='Medias',
showInLegend=TRUE)
})
output$AovBY <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Tratamiento','Dep2')
#str(dataBY)
Anovabyy <- (anovaBF(Dep2 ~ Tratamiento, data=dataBY, whichRandom = "ID",
rscaleFixed = prio,iterations = input$numberiterations))
S <- data.frame(Priori=(prio), BF=Anovabyy[1][1])
TabBY <- S[,1:3]
TabBY$BF.bf <- round(TabBY$BF.bf,3)
TabBY$BF.error <- signif(TabBY$BF.error,3 )
colnames(TabBY) <- c('Priori','BF10','Error')
TabBY <- rbind(TabBY, c(1-prio,1,''))
rownames(TabBY) <- c('Modelo Alternativo', 'Modelo Nulo')
TabBY <- cbind(rownames(TabBY),TabBY)
names(TabBY)[1] <- ''
TabBY
})
output$AovBYpost <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Tratamiento','Dep2')
lambda <- -log(0.01)/(3*sd(dataBY$Dep2))
pulpdat <- list(N=length(dataBY$Dep2),J=length(unique(dataBY$Tratamiento)),response=dataBY$Dep2,predictor=as.numeric(dataBY$Tratamiento),lambda=lambda)
fit <- sampling(sm, data=pulpdat, chains=input$chainsnumber,  seed = 12345,iter=input$numberiterations)
fit.sum <- summary(fit, pars=c("mu","sigmaalpha","sigmaepsilon","a") )
TablaPos <- data.frame(fit.sum$summary)
rownames(TablaPos) <- c('Mu','Sigma Alpha','Sigma Epsilon',unique(as.character(dataBY$Tratamiento)))
TablaPos2 <- data.frame(rownames(TablaPos),TablaPos)
colnames(TablaPos2) <- c('','Mean','SE Mean', 'SD', '2.5%','25%','50%','75%','97.5%','n eff','R hat')
TablaPos2
#str(dataBY)
#Anovabyy <- (anovaBF(Dep2 ~ Tratamiento, data=dataBY, whichRandom = "ID",
#                     rscaleFixed = prio,iterations = input$numberiterations))
#
#post <- summary(posterior(Anovabyy,iterations = input$numberiterations))
#
#S <- data.frame(post[1][1])
#colnames(S) <- c('Media Posterior','Desv. Posterior','Naive SE','Time Series SE')
#rownames(S)[1] <- 'Media General'
#S <- cbind(rownames(S),S)
#names(S)[1] <- ''
#S
})
output$AovBYposmcmc <- renderHighchart({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Tratamiento','Dep2')
#str(dataBY)
Anovabyy <- (anovaBF(Dep2 ~ Tratamiento, data=dataBY, whichRandom = "ID",
rscaleFixed = prio,iterations = input$numberiterations))
post <- (posterior(Anovabyy,iterations = input$numberiterations))
MCMC <- data.frame(Iteración=1:input$numberiterations,post[,])
if (input$mcmcCHAIN=="Media y Varianza"){
highchart()%>%
hc_yAxis_multiples( list(top = "0%", height = "50%", title = list(text = "Media"),opposite=FALSE),
list(top = "50%", height = "50%", title = list(text = "Sigma2") ,opposite=TRUE))%>%
hc_add_series(MCMC, type='line', hcaes(x=Iteración,y=mu),yAxis=0, name='Media',color='#24509C')%>%
hc_add_series(MCMC, type='line', hcaes(x=Iteración,y=sig2),yAxis=1, name='Sigma2',color='#31999C')
} else {
MCMCCom <- MCMC[,-c(2,ncol(MCMC),ncol(MCMC)-1)]
rownames(MCMCCom) <- MCMC[,1]
MCMCCom2 <- as.matrix(MCMCCom)
MCMCMer <- melt(MCMCCom, id.vars="Iteración")
highchart()%>%
hc_add_series(MCMCMer, type='line', hcaes(x=Iteración, y=value, group=variable))%>%
hc_title(text='MCMC chains')%>%
hc_exporting(enabled = TRUE,
filename = paste0('Cadenas de Marcov'))
}
})
#   output$AovBYposchains <- renderHighchart({
#     Data <- data()
#     Data <- na.omit(Data)
#     Dep <- input$y
#     Ind <- input$x
#     prio <- input$prior
#
#
#     Factor <- as.factor(as.matrix(Data[,Ind]))
#     Depend <- as.numeric(as.matrix(Data[,Dep]))
#
#     dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
#     colnames(dataBY) <- c('Tratamiento','Dep2')
#     #str(dataBY)
#     Anovabyy <- (anovaBF(Dep2 ~ Tratamiento, data=dataBY, whichRandom = "ID",
#                          rscaleFixed = prio,iterations = input$numberiterations))
#
#     post <- (posterior(Anovabyy,iterations = input$numberiterations))
#
#     MCMC <- data.frame(Iteración=1:input$numberiterations,post[,])
#     MCMCCom <- MCMC[,-c(2,ncol(MCMC),ncol(MCMC)-1)]
#     rownames(MCMCCom) <- MCMC[,1]
#     MCMCCom2 <- as.matrix(MCMCCom)
#     MCMCMer <- melt(MCMCCom, id.vars="Iteración")
#     highchart()%>%
#      hc_add_series(MCMCMer, type='line', hcaes(x=Iteración, y=value, group=variable))%>%
#       hc_title(text='MCMC chains')
#   })
#
output$AovBYposcurves <- renderHighchart({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Tratamiento','Dep2')
#str(dataBY)
Anovabyy <- (anovaBF(Dep2 ~ Tratamiento, data=dataBY, whichRandom = "ID",
rscaleFixed = prio,iterations = input$numberiterations))
post <- (posterior(Anovabyy,iterations = input$numberiterations))
MCMC <- data.frame(Iteración=1:input$numberiterations,post[,])
MCMCCom <- MCMC[,-c(2,ncol(MCMC),ncol(MCMC)-1)]
MCMCMer <- melt(MCMCCom, id.vars="Iteración")
ds <- map(levels(MCMCMer$variable), function(x){
MCMCMer <- density(MCMCMer$value[MCMCMer$variable == x])[1:2]
MCMCMer <- list_parse2(as.data.frame(MCMCMer))
list(data = MCMCMer, name = x)
})
highchart() %>%
hc_add_series_list(ds)%>%
hc_yAxis(title=list(text='Density'))%>%
hc_exporting(enabled = TRUE,
filename = paste0('Curvas de densidad - Distribuciones marginales posteriores.'))
})
output$conclusionaovby <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
prio <- input$prior
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
str(dataBY)
Anovabyy <- (anovaBF(Dep2 ~ Ind2, data=dataBY, whichRandom = "all",
rscaleFixed = prio))
# posterior(Anovabyy,iterations = 1000)
# plot(Anovabyy)
S <- data.frame(Priori=prio, BF=Anovabyy[1])
FB <- S[,2]
if (FB <= 3 & FB > 1 ){
response <- paste0('Evidencia débil a favor del rechazo de la hipótesis nula ')
} else if  (FB <= 10 & FB > 3 ) {
response <- paste0('Evidencia moderada a favor del rechazo de la hipótesis nula ')
} else if  (FB <= 30 & FB > 10 ){
response <- paste0('Evidencia fuerte a favor del rechazo de la hipótesis nula ')
}else if  (FB > 30 ){
response <- paste0('Evidencia decisiva  a favor del rechazo de la hipótesis nula')
}else if  (FB < 1 & FB > 1/3 ){
response <- paste0('Evidencia moderada a favor de la hipótesis nula ')
}else if  (FB <= 1/3 & FB > 1/10 ){
response <- paste0('Evidencia fuerte a favor de la hipótesis nula ')
}else if  (FB <= 1/30 & FB > 1/100){
response <- paste0('Evidencia decisiva  a favor de de la hipótesis nula')
}else if  (FB == 1){
response <- paste0('No existe evidencia')}
response
})
output$diagramaSupuestos <- renderHighchart({
Data <- data()
#Data = Datas
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
#Ind <- "boneDev"
#Dep <- "growth"
alph <- input$alpha
#alph <- 0.05
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
dataBY <- data.frame(Ind2=Factor, Dep2=Depend)
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
Test <- lillie.test(SA$residuals)
if(Test$p.value >=  alph ){
col_normalidad= "#77DA85"
col_normalidad_si= "#77DA85"
col_normalidad_no= "#D5D5D5"
}else{
col_normalidad= "#D5D5D5"
col_normalidad_si= "#D5D5D5"
col_normalidad_no= "#77DA85"
}
Bart <- bartlett.test(Dep2 ~ Ind2, data=dataBY)
if(Bart$p.value >=  alph ){
col_homocedasticidad= "#77DA85"
col_homocedasticidad_si= "#77DA85"
col_homocedasticidad_no= "#D5D5D5"
}else{
col_homocedasticidad= "#D5D5D5"
col_homocedasticidad_si= "#D5D5D5"
col_homocedasticidad_no= "#77DA85"
}
if(skewness(SA$residuals) ==  0 ){
col_simetria= "#77DA85"
col_simetria_si= "#77DA85"
col_simetria_no= "#D5D5D5"
}else{
col_simetria= "#D5D5D5"
col_simetria_si= "#D5D5D5"
col_simetria_no= "#77DA85"
}
if(durbinWatsonTest(SA)[3] >=  alph){
col_independencia= "#77DA85"
col_independencia_si= "#77DA85"
col_independencia_no= "#D5D5D5"
}else{
col_independencia= "#D5D5D5"
col_independencia_si= "#D5D5D5"
col_independencia_no= "#77DA85"
}
if (col_simetria_si == "#77DA85"){
col_kw="#77DA85"
} else {col_kw="#D5D5D5" }
if (col_homocedasticidad_si == "#77DA85"){
col_independencia="#77DA85"
} else {col_independencia="#D5D5D5" }
#  if (col_independencia_no == "#77DA85" | col_independencia_si == "#77DA85"){
#    col_independencia="#77DA85"
#  } else {col_independencia="#D5D5D5" }
if (col_normalidad_si== "#77DA85" & col_homocedasticidad_si== "#77DA85" ){
col_anova="#77DA85"
}else {col_anova="#D5D5D5" }
if (col_simetria_si=="#77DA85" | col_simetria_no=="#77DA85"){
col_simetria= "#77DA85"
}
if (col_homocedasticidad_si=="#77DA85" | col_homocedasticidad_no=="#77DA85"){
col_homocedasticidad= "#77DA85"
}
highchart() %>%
hc_chart(type = 'organization', inverted = TRUE) %>%
hc_add_series(name='Diagrama de técnicas según cumplimiento de supuestos',
data = list(
list(from = 'Comparación de medias por grupo', to = '¿Cumple supuesto de normalidad?'),
list(from = '¿Cumple supuesto de normalidad?', to = 'Sí, cumple normalidad'),
list(from = 'Sí, cumple normalidad', to = '¿Cumple supuesto de homocedasticidad?'),
list(from = '¿Cumple supuesto de normalidad?', to = 'No cumple normalidad'),
list(from = '¿Cumple supuesto de homocedasticidad?', to = 'Sí, cumple homocedasticidad'),
list(from = 'Sí, cumple homocedasticidad', to = '¿Cumple supuesto de independencia?'),
list(from = '¿Cumple supuesto de independencia?', to = 'Sí, cumple independencia'),
list(from = '¿Cumple supuesto de independencia?', to = 'No cumple independencia'),
list(from = '¿Cumple supuesto de homocedasticidad?', to = 'No cumple homocedasticidad'),
list(from = '¿Cumple supuesto de simetría?', to = 'Sí, cumple simetría'),
list(from = '¿Cumple supuesto de simetría?', to = 'No cumple simetría'),
#  list(from = 'Sí, cumple homocedasticidad', to = 'ANOVA Clásico'),
#list(from = 'No cumple normalidad', to = '¿Cumple supuesto de simetría?'),
list(from = 'No cumple homocedasticidad', to = '¿Cumple supuesto de simetría?')
#list(from = 'Sí, cumple simetría', to = 'Kruskal Wallis'),
#list(from = 'No cumple simetría', to = 'ANOVA Bayesiano'),
# list(from = 'Comparación de medias por grupo', to = 'ANOVA Bayesiano')
),
nodes=  list(
list(id = 'Comparación de medias por grupo', color="#77D0DA"),
list(id = '¿Cumple supuesto de normalidad?', color=col_normalidad),
list(id = 'Sí, cumple normalidad', color=col_normalidad_si),
list(id = 'No cumple normalidad', color=col_normalidad_no),
list(id = '¿Cumple supuesto de homocedasticidad?', color=col_homocedasticidad),
list(id = 'Sí, cumple homocedasticidad', color=col_homocedasticidad_si),
list(id = 'No cumple homocedasticidad', color=col_homocedasticidad_no),
list(id = '¿Cumple supuesto de simetría?', color=col_simetria),
list(id = 'Sí, cumple simetría', color=col_simetria_si),
list(id = 'No cumple simetría', color=col_simetria_no),
list(id = '¿Cumple supuesto de independencia?', color=col_independencia),
list(id = 'Sí, cumple independencia', color=col_independencia_si),
list(id = 'No cumple independencia', color=col_independencia_no)
#list(id = 'ANOVA Clásico', color=col_anova),
#list(id = 'Kruskal Wallis', color=col_kw),
#list(id = 'ANOVA Bayesiano', color='#77DA85'))
))
})
output$eleccionTecnica <- renderHighchart({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
dataBY <- data.frame(Ind2=Factor, Dep2=Data[,Dep])
colnames(dataBY) <- c('Ind2','Dep2')
SA <- (aov(Dep2 ~ Ind2, data=dataBY))
Test <- lillie.test(SA$residuals)
Bart <- bartlett.test(Dep2 ~ Ind2, data=dataBY)
if(Test$p.value >=  input$alpha & Bart$p.value >=  input$alpha){
col_anova="#77DA85"
} else {col_anova="#DC7676"}
if(skewness(SA$residuals) ==  0){
col_kw="#77DA85"
} else {col_kw="#DC7676"}
highchart() %>%
hc_chart(type = 'organization', inverted=TRUE) %>%
hc_add_series(name='Diagrama de técnicas según cumplimiento de supuestos',
data = list(
list(from = 'Kruskal Wallis', to = 'Kruskal Wallis'),
list(from = 'ANOVA Clásico', to = 'ANOVA Clásico'),
list(from = 'ANOVA Bayesiano', to = 'ANOVA Bayesiano')
),
nodes=  list(
list(id = 'ANOVA Clásico', color=col_anova),
list(id = 'Kruskal Wallis', color=col_kw),
list(id = 'ANOVA Bayesiano', color='#77DA85')
))
})
output$kw <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
SA <-kruskal.test(Depend~Factor, data = Data)
S <- data.frame(SA$statistic,SA$parameter,signif(SA$p.value,4))
colnames(S) <- c('Kruskal-Wallis chi-squared','Gl','Val-p')
S
})
output$conclusionKW <- renderText({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
SA <-kruskal.test(Depend~Factor, data = Data)
if (SA$p.value < input$alphakw){
response <- paste0('Existen diferencias significativas entre los grupos de ',Ind)
} else if  (SA$p.value > input$alphakw){
response <- paste0('No existen diferencias significativas entre los grupos de ',Ind)}
response
})
output$KWpost <- renderTable({
Data <- data()
Data <- na.omit(Data)
Dep <- input$y
Ind <- input$x
Factor <- as.factor(as.matrix(Data[,Ind]))
Depend <- as.numeric(as.matrix(Data[,Dep]))
Pares <- pairwise.wilcox.test(x = Depend, g = Factor, p.adjust.method = input$padjust )
Pv <- Pares$p.value
Pv[is.na(Pv)] <- ' - '
Pv <- cbind(rownames(Pv),Pv)
Pv
})
})
runApp(app)
}
